

import matplotlib.animation as animation
import time
from IPython.display import HTML

def explicit_runge_kutt_animated(a, b, c, n, h, start, start_val, func):
    # print("pace is: ", h)
    val = np.copy(start_val)
    vals = [np.copy(val)]
    t = start
    for i in range(n):
        val_mid = [val]
        t_mid = [t]
        for j in range(1, len(b)):
            t_mid.append(t + c[j] * h)
            val_mid.append(val + h * sum([a[j][k] * func(val_mid[k], t_mid) for k in range(j)]))
        t += h
        dif = [func(val_mid[k], t_mid[k]) for k in range(len(b))]
        vals.append(np.copy(val))
        val += h * scal_prod(b, dif)

    def animate(frame):
        if frame == 0:
            x_side = max([abs(vals[i][0]) for i in range(len(vals))])
            y_side = max([abs(vals[i][1]) for i in range(len(vals))])
            ax.set_ylim(-y_side * 1,5, y_side * 1,5)
            ax.set_xlim(-x_side * 1,5, x_side * 1,5)
            line.set_ydata([-y_side, y_side])
            line.set_xdata([-x_side, x_side])
            return line,

        x = np.array([vals[i][0] for i in range(frame + 2)])
        y = np.array([vals[i][1] for i in range(frame + 2)])
        line.set_ydata(y)
        line.set_xdata(x)

        # Меняем пределы осей (пример: подстраиваем под текущий максимум и минимум)
        y_min = np.min(y)
        y_max = np.max(y)
        padding = 0.1 * (y_max - y_min)  # Небольшой отступ сверху и снизу
        ax.set_ylim(y_min - padding, y_max + padding) #Установка пределов

        x_min = np.min(x)
        x_max = np.max(x)
        padding = 0.1 * (x_max - x_min)  # Небольшой отступ сверху и снизу
        ax.set_xlim(x_min - padding, x_max + padding) #Установка пределов

        return line,  # Важно: возвращаем изменяемый объект (line,)

    fig, ax = plt.subplots()
    x_side = max([abs(vals[i][0]) for i in range(len(vals))])
    y_side = max([abs(vals[i][1]) for i in range(len(vals))])
    line, = ax.plot([-x_side, x_side], [-y_side, y_side])  # Инициализируем линию графика
    ani = animation.FuncAnimation(fig, animate, frames=n, blit=True, repeat=False, interval=20)
    HTML(ani.to_jshtml())
    plt.show()

pace = 1.0
print(f"animation with pace: {pace}")
animation_html = explicit_runge_kutt_animated(a, b, c, 1000, pace, 0, start_val, func1)
animation_html

pace = 1.5
print(f"animation with pace: {pace}")
animation_html = explicit_runge_kutt_animated(a, b, c, 100, pace, 0, start_val, func1)
animation_html
